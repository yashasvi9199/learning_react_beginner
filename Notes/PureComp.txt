We can create a component by extending the PureComponent class
Pure component is similar to regular component that we have been creating up till now, with few catches here.
If there are no differences, the component is not re-rendered == performance boost
It is good idea to ensure that all the child components are also pure component to avoid unexpected behaviour
Never mutate the state. Always return a new object that reflects the new state {static getDerivedStateFromProps (props, state)}
Safer to use Regular components, unless there is a performance hidden under a component observed.

Comparison : 
    regular component
        -does not implement shouldComponentUpdate() method
        -always returns true in above method
    
    pure component
        -implements shouldComponentUpdate() method
        -with a shallow comparison (SC) of props and state 


Shallow Comparison(SC)
    1.Primitive Types
        - 'a' (SC) 'b' returns {true} if 'a' and 'b' have the same value and are of the same type
        - eg.
            string a = 'Peter'
            string b = 'Peter'

            var equalAB = (a === b)     //return {true}

    2. Complex Types
        - 'a' (SC) 'b' returns true if 'a' and 'b' reference the exact same object
        - eg.
            var a = [1,2,3]
            var b = [1,2,3]
            var c = a 

            var equalAB = (a === b)     //return {false}
            var equalAC = (a === c)     //return {true}


A pure component implements shouldComponentUpdate() method with a shallow prop and state comparison i.e : 

    SC of prevState with currentState
    SC of prevProps with currentProps
    -- if there is a difference in SC --
    re-render component
    -- else --
    do not re-render the component

The similar instance can be seen in log where Regular component is re-rendering every 2 seconds due to setInterval() but
The pure component failed to re-render as there was no difference on shallo comparison(SC) {as described above}
: console logs 
    {
        Parent Component
        Pure Component
        Regular Component

        Parent Component
        Regular Component

        .. and so on repeat
    }

However, in PureComp_Parent_02.js we can see that all components only rendered once.
The reason being that PureComp_Parent_02.js extends to PureComponent
Since the parent component did not re-render, the child components cannot re-render as well

Details changes in all 4 Parent files :    ; changed name?     ;; Console logs

PureCom_Parent01.js -> Regular Component   ; No SC change      ;; Parent : -- Reg Child : --  Pure Child : 01
PureCom_Parent02.js -> Pure Component      ; No SC change      ;; Parent : 01 Reg Child : 01  Pure Child : 01
PureCom_Parent03.js -> Regular Component   ; SC change         ;; Parent : -- Reg Child : --  Pure Child : 01
PureCom_Parent04.js -> Pure Component      ; SC change         ;; Parent : 02 Reg Child : 02  Pure Child : 02